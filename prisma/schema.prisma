generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model payroll {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  salary     Int
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model performance_evaluation {
  id                                            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date                                          DateTime @db.Date
  score                                         Int
  user_id                                       String   @db.Uuid
  teamlead_id                                   String   @db.Uuid
  created_at                                    DateTime @default(now()) @db.Timestamp(6)
  updated_at                                    DateTime @default(now()) @db.Timestamp(6)
  user_performance_evaluation_teamlead_idTouser user     @relation("performance_evaluation_teamlead_idTouser", fields: [teamlead_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_performance_evaluation_user_idTouser     user     @relation("performance_evaluation_user_idTouser", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model time_tracking {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime @db.Date
  hours      Int
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                                              String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                                           String                   @unique @db.VarChar(255)
  firstName                                                       String?                  @db.VarChar(255)
  lastName                                                        String?                  @db.VarChar(255)
  roq_user_id                                                     String                   @db.VarChar(255)
  tenant_id                                                       String                   @db.VarChar(255)
  created_at                                                      DateTime                 @default(now()) @db.Timestamp(6)
  updated_at                                                      DateTime                 @default(now()) @db.Timestamp(6)
  company                                                         company[]
  payroll                                                         payroll[]
  performance_evaluation_performance_evaluation_teamlead_idTouser performance_evaluation[] @relation("performance_evaluation_teamlead_idTouser")
  performance_evaluation_performance_evaluation_user_idTouser     performance_evaluation[] @relation("performance_evaluation_user_idTouser")
  time_tracking                                                   time_tracking[]
  vacation                                                        vacation[]
}

model vacation {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_date DateTime @db.Date
  end_date   DateTime @db.Date
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
